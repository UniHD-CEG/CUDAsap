/* Generated by re2c 0.16 on Tue Apr 21 11:32:24 2020 */
#line 1 "inc/ptx_parser.hre"
#ifndef PTX_PARSER_H
#define PTX_PARSER_H

#include "PTXFunction.h"

#include <fstream>
#include <iostream>
#include <istream>
#include <map>
#include <regex>
#include <string>
#include <vector>

namespace mekong {

#define YYMAXFILL 13

struct input_t {
  size_t len;
  char *str;

  input_t(const char *s) : len(strlen(s)), str(new char[len + YYMAXFILL]) {
    memcpy(str, s, len);
    memset(str + len, ' ', YYMAXFILL);
  }
  ~input_t() { delete[] str; }
};

enum TokenClass {
  None,
  Comment,
  Directive,
  Identifier,
  Integer,
  Float,
  lBracket,
  rBracket,
  lcBracket,
  rcBracket,
  leBracket,
  reBracket,
  Register,
  Comma,
  Semicolon,
  Guard,
  Instruction,
  Label,
  AddressOp,
  EqualSign,
  String
};

const char *TokenClassName[] = {
    "None",      "Comment",     "Directive", "Identifier", "Integer",
    "Float",     "lBracket",    "rBracket",  "lcBracket",  "rcBracket",
    "leBracket", "reBracket",   "Register",  "Comma",      "Semicolon",
    "Guard",     "Instruction", "Label",     "AddressOp",  "EqualSign",
    "String"};

struct Token {
  TokenClass ty = None;
  std::string str;

  Token(TokenClass tc, std::string str) : ty(tc), str(str){};
};

std::vector<Token> lexicalAnalysis(std::string filename) {
  std::vector<Token> tokenVec;
  std::ifstream file(filename, std::ios::binary | std::ios::ate);
  auto size = file.tellg();
  file.seekg(0, std::ios::beg);

  std::string buffer(size, '\0');
  if (!file.read(&buffer[0], size))
    return tokenVec;

  auto addToken = [&tokenVec](TokenClass ty, const char *const begin = nullptr,
                              const char *const end = nullptr) {
    if (begin == nullptr or end == nullptr)
      tokenVec.push_back({ty, ""});
    tokenVec.push_back({ty, std::string(begin, end - begin)});
  };

  input_t input(buffer.c_str());
  const char *YYCURSOR = input.str;
  const char *const YYLIMIT = input.str + input.len + YYMAXFILL;
  const char *YYMARKER = YYLIMIT;

  for (;;) {
    const char *token = YYCURSOR;
    
#line 95 "inc/ptx_parser.h"
{
	char yych;
	unsigned int yyaccept = 0;
	if ((YYLIMIT - YYCURSOR) < 13) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\r':
	case ' ':	goto yy4;
	case '"':	goto yy7;
	case '$':
	case '_':	goto yy8;
	case '%':	goto yy9;
	case '\'':	goto yy10;
	case '(':	goto yy11;
	case ')':	goto yy13;
	case '+':	goto yy15;
	case ',':	goto yy17;
	case '-':	goto yy19;
	case '.':	goto yy21;
	case '/':	goto yy23;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy24;
	case ';':	goto yy27;
	case '=':	goto yy29;
	case '@':	goto yy31;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':	goto yy33;
	case '[':	goto yy36;
	case ']':	goto yy38;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy40;
	case '{':	goto yy43;
	case '}':	goto yy45;
	default:	goto yy2;
	}
yy2:
	++YYCURSOR;
yy3:
#line 97 "inc/ptx_parser.hre"
	{ std::cerr << "no match:\t" << std::string(token, YYCURSOR-token) <<
      "\n"; continue;}
#line 196 "inc/ptx_parser.h"
yy4:
	yyaccept = 0;
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '\t':
	case '\n':
	case '\v':
	case '\r':
	case ' ':	goto yy4;
	case '/':	goto yy47;
	default:	goto yy6;
	}
yy6:
#line 103 "inc/ptx_parser.hre"
	{ continue; }
#line 214 "inc/ptx_parser.h"
yy7:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	goto yy50;
yy8:
	yych = *++YYCURSOR;
	switch (yych) {
	case '$':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy33;
	default:	goto yy3;
	}
yy9:
	yych = *++YYCURSOR;
	switch (yych) {
	case '$':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':	goto yy33;
	case 'a':
	case 'b':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	case 'c':	goto yy55;
	case 'n':	goto yy56;
	case 't':	goto yy57;
	default:	goto yy3;
	}
yy10:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	goto yy59;
yy11:
	++YYCURSOR;
#line 122 "inc/ptx_parser.hre"
	{ addToken(lBracket, token, YYCURSOR); continue;}
#line 365 "inc/ptx_parser.h"
yy13:
	++YYCURSOR;
#line 123 "inc/ptx_parser.hre"
	{ addToken(rBracket, token, YYCURSOR); continue;}
#line 370 "inc/ptx_parser.h"
yy15:
	++YYCURSOR;
#line 138 "inc/ptx_parser.hre"
	{ addToken(AddressOp, token, YYCURSOR); continue;}
#line 375 "inc/ptx_parser.h"
yy17:
	++YYCURSOR;
#line 130 "inc/ptx_parser.hre"
	{ addToken(Comma, token, YYCURSOR); continue;}
#line 380 "inc/ptx_parser.h"
yy19:
	++YYCURSOR;
#line 139 "inc/ptx_parser.hre"
	{ addToken(AddressOp, token, YYCURSOR); continue;}
#line 385 "inc/ptx_parser.h"
yy21:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy60;
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'c':
	case 'd':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'm':
	case 'n':
	case 'o':
	case 'q':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	case 'a':	goto yy65;
	case 'b':
	case 'f':
	case 's':
	case 'u':	goto yy66;
	case 'e':	goto yy67;
	case 'g':	goto yy68;
	case 'l':	goto yy69;
	case 'p':	goto yy70;
	case 'r':	goto yy71;
	case 't':	goto yy72;
	case 'v':	goto yy73;
	default:	goto yy22;
	}
yy22:
#line 118 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 456 "inc/ptx_parser.h"
yy23:
	yyaccept = 1;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '*':	goto yy74;
	case '/':	goto yy76;
	default:	goto yy3;
	}
yy24:
	yyaccept = 2;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '.':	goto yy60;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy24;
	case 'E':
	case 'e':	goto yy78;
	default:	goto yy26;
	}
yy26:
#line 170 "inc/ptx_parser.hre"
	{ addToken(Integer, token, YYCURSOR); continue;}
#line 489 "inc/ptx_parser.h"
yy27:
	++YYCURSOR;
#line 132 "inc/ptx_parser.hre"
	{ addToken(Semicolon, token, YYCURSOR); continue;}
#line 494 "inc/ptx_parser.h"
yy29:
	++YYCURSOR;
#line 135 "inc/ptx_parser.hre"
	{ addToken(EqualSign, token, YYCURSOR); continue;}
#line 499 "inc/ptx_parser.h"
yy31:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case '!':	goto yy79;
	default:	goto yy32;
	}
yy32:
#line 155 "inc/ptx_parser.hre"
	{ addToken(Guard, token, YYCURSOR); continue;}
#line 509 "inc/ptx_parser.h"
yy33:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
yy34:
	switch (yych) {
	case '$':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy33;
	case ':':	goto yy80;
	default:	goto yy35;
	}
yy35:
#line 164 "inc/ptx_parser.hre"
	{ addToken(Identifier, token, YYCURSOR); continue;}
#line 586 "inc/ptx_parser.h"
yy36:
	++YYCURSOR;
#line 124 "inc/ptx_parser.hre"
	{ addToken(leBracket, token, YYCURSOR); continue;}
#line 591 "inc/ptx_parser.h"
yy38:
	++YYCURSOR;
#line 125 "inc/ptx_parser.hre"
	{ addToken(reBracket, token, YYCURSOR); continue;}
#line 596 "inc/ptx_parser.h"
yy40:
	yyaccept = 3;
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '$':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':	goto yy33;
	case '.':	goto yy82;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy40;
	case ':':	goto yy80;
	default:	goto yy42;
	}
yy42:
#line 158 "inc/ptx_parser.hre"
	{ addToken(Instruction, token, YYCURSOR);
      continue;}
#line 675 "inc/ptx_parser.h"
yy43:
	++YYCURSOR;
#line 126 "inc/ptx_parser.hre"
	{ addToken(lcBracket, token, YYCURSOR); continue;}
#line 680 "inc/ptx_parser.h"
yy45:
	++YYCURSOR;
#line 127 "inc/ptx_parser.hre"
	{ addToken(rcBracket, token, YYCURSOR); continue;}
#line 685 "inc/ptx_parser.h"
yy47:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '*':	goto yy74;
	default:	goto yy48;
	}
yy48:
	YYCURSOR = YYMARKER;
	switch (yyaccept) {
	case 0: 	goto yy6;
	case 1: 	goto yy3;
	case 2: 	goto yy26;
	case 3: 	goto yy42;
	case 4: 	goto yy35;
	case 5: 	goto yy62;
	default:	goto yy22;
	}
yy49:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
yy50:
	switch (yych) {
	case '"':	goto yy51;
	default:	goto yy49;
	}
yy51:
	++YYCURSOR;
#line 146 "inc/ptx_parser.hre"
	{ addToken(String, token, YYCURSOR); continue;}
#line 718 "inc/ptx_parser.h"
yy53:
	yyaccept = 4;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 2) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '$':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':	goto yy33;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case ':':	goto yy80;
	case '<':	goto yy86;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	default:	goto yy35;
	}
yy55:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case '<':	goto yy86;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	case 't':	goto yy87;
	default:	goto yy34;
	}
yy56:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case '<':	goto yy86;
	case 'a':
	case 'b':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	case 'c':	goto yy55;
	case 't':	goto yy57;
	default:	goto yy34;
	}
yy57:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case '<':	goto yy86;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	case 'i':	goto yy88;
	default:	goto yy34;
	}
yy58:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
yy59:
	switch (yych) {
	case '\'':	goto yy51;
	default:	goto yy58;
	}
yy60:
	yyaccept = 5;
	YYMARKER = ++YYCURSOR;
	if ((YYLIMIT - YYCURSOR) < 3) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy60;
	case 'E':
	case 'e':	goto yy78;
	case 'F':
	case 'L':
	case 'f':
	case 'l':	goto yy89;
	default:	goto yy62;
	}
yy62:
#line 176 "inc/ptx_parser.hre"
	{ addToken(Float, token, YYCURSOR); continue;}
#line 958 "inc/ptx_parser.h"
yy63:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
yy64:
	switch (yych) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy22;
	}
yy65:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'd':	goto yy90;
	default:	goto yy64;
	}
yy66:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '3':	goto yy91;
	case '6':	goto yy92;
	default:	goto yy64;
	}
yy67:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy93;
	default:	goto yy64;
	}
yy68:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l':	goto yy94;
	default:	goto yy64;
	}
yy69:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy95;
	default:	goto yy64;
	}
yy70:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':	goto yy96;
	case 'r':	goto yy97;
	default:	goto yy64;
	}
yy71:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy98;
	default:	goto yy64;
	}
yy72:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':	goto yy99;
	default:	goto yy64;
	}
yy73:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy100;
	case 'i':	goto yy101;
	default:	goto yy64;
	}
yy74:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '*':	goto yy102;
	default:	goto yy74;
	}
yy76:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '\n':	goto yy103;
	default:	goto yy76;
	}
yy78:
	yych = *++YYCURSOR;
	switch (yych) {
	case '+':
	case '-':	goto yy105;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy106;
	default:	goto yy48;
	}
yy79:
	yych = *++YYCURSOR;
	goto yy32;
yy80:
	++YYCURSOR;
#line 167 "inc/ptx_parser.hre"
	{ addToken(Label, token, YYCURSOR); continue;}
#line 1117 "inc/ptx_parser.h"
yy82:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy108;
	default:	goto yy48;
	}
yy83:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '$':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy33;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case ':':	goto yy80;
	case '>':	goto yy110;
	default:	goto yy85;
	}
yy85:
#line 149 "inc/ptx_parser.hre"
	{ addToken(Register, token, YYCURSOR); continue;}
#line 1237 "inc/ptx_parser.h"
yy86:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy111;
	default:	goto yy48;
	}
yy87:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case '<':	goto yy86;
	case 'a':	goto yy57;
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	default:	goto yy34;
	}
yy88:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case '<':	goto yy86;
	case 'a':
	case 'b':
	case 'c':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	case 'd':	goto yy113;
	default:	goto yy34;
	}
yy89:
	yych = *++YYCURSOR;
	goto yy62;
yy90:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'd':	goto yy114;
	default:	goto yy64;
	}
yy91:
	yych = *++YYCURSOR;
	switch (yych) {
	case '2':	goto yy115;
	default:	goto yy48;
	}
yy92:
	yych = *++YYCURSOR;
	switch (yych) {
	case '4':	goto yy115;
	default:	goto yy48;
	}
yy93:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy117;
	default:	goto yy64;
	}
yy94:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy118;
	default:	goto yy64;
	}
yy95:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'c':	goto yy119;
	default:	goto yy64;
	}
yy96:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy121;
	default:	goto yy64;
	}
yy97:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy122;
	default:	goto yy64;
	}
yy98:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy123;
	default:	goto yy64;
	}
yy99:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy125;
	default:	goto yy64;
	}
yy100:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy126;
	default:	goto yy64;
	}
yy101:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy127;
	default:	goto yy64;
	}
yy102:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '/':	goto yy4;
	default:	goto yy74;
	}
yy103:
	++YYCURSOR;
#line 105 "inc/ptx_parser.hre"
	{ addToken(Comment, token, YYCURSOR); continue;}
#line 1426 "inc/ptx_parser.h"
yy105:
	yych = *++YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy106;
	default:	goto yy48;
	}
yy106:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy106;
	case 'F':
	case 'L':
	case 'f':
	case 'l':	goto yy89;
	default:	goto yy62;
	}
yy108:
	yyaccept = 3;
	YYMARKER = ++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '.':	goto yy82;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy108;
	default:	goto yy42;
	}
yy110:
	yych = *++YYCURSOR;
	goto yy85;
yy111:
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) break;
	yych = *YYCURSOR;
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy111;
	case '>':	goto yy110;
	default:	goto yy85;
	}
yy113:
	yyaccept = 4;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '.':	goto yy128;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy83;
	case '<':	goto yy86;
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy53;
	default:	goto yy34;
	}
yy114:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy129;
	default:	goto yy64;
	}
yy115:
	++YYCURSOR;
#line 119 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 1583 "inc/ptx_parser.h"
yy117:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'r':	goto yy130;
	default:	goto yy64;
	}
yy118:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b':	goto yy131;
	default:	goto yy64;
	}
yy119:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy120;
	}
yy120:
#line 117 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 1656 "inc/ptx_parser.h"
yy121:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':	goto yy132;
	default:	goto yy64;
	}
yy122:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'd':	goto yy133;
	default:	goto yy64;
	}
yy123:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy124;
	}
yy124:
#line 114 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 1729 "inc/ptx_parser.h"
yy125:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'g':	goto yy135;
	default:	goto yy64;
	}
yy126:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy136;
	default:	goto yy64;
	}
yy127:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i':	goto yy137;
	default:	goto yy64;
	}
yy128:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'x':
	case 'y':
	case 'z':	goto yy138;
	default:	goto yy48;
	}
yy129:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy140;
	default:	goto yy64;
	}
yy130:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'y':	goto yy141;
	default:	goto yy64;
	}
yy131:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'a':	goto yy143;
	default:	goto yy64;
	}
yy132:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'm':	goto yy144;
	default:	goto yy64;
	}
yy133:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy134;
	}
yy134:
#line 115 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 1840 "inc/ptx_parser.h"
yy135:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy146;
	default:	goto yy64;
	}
yy136:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i':	goto yy147;
	default:	goto yy64;
	}
yy137:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'b':	goto yy148;
	default:	goto yy64;
	}
yy138:
	++YYCURSOR;
#line 151 "inc/ptx_parser.hre"
	{ addToken(Register, token,
      YYCURSOR); continue;}
#line 1864 "inc/ptx_parser.h"
yy140:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy149;
	default:	goto yy64;
	}
yy141:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy142;
	}
yy142:
#line 112 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 1931 "inc/ptx_parser.h"
yy143:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l':	goto yy150;
	default:	goto yy64;
	}
yy144:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy145;
	}
yy145:
#line 113 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 1998 "inc/ptx_parser.h"
yy146:
	yych = *++YYCURSOR;
	switch (yych) {
	case 't':	goto yy152;
	default:	goto yy64;
	}
yy147:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'o':	goto yy154;
	default:	goto yy64;
	}
yy148:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'l':	goto yy155;
	default:	goto yy64;
	}
yy149:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy156;
	default:	goto yy64;
	}
yy150:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy151;
	}
yy151:
#line 116 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 2083 "inc/ptx_parser.h"
yy152:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy153;
	}
yy153:
#line 109 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 2144 "inc/ptx_parser.h"
yy154:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'n':	goto yy157;
	default:	goto yy64;
	}
yy155:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy159;
	default:	goto yy64;
	}
yy156:
	yyaccept = 6;
	yych = *(YYMARKER = ++YYCURSOR);
	switch (yych) {
	case '_':	goto yy161;
	default:	goto yy64;
	}
yy157:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy158;
	}
yy158:
#line 108 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 2224 "inc/ptx_parser.h"
yy159:
	++YYCURSOR;
	switch ((yych = *YYCURSOR)) {
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':	goto yy63;
	default:	goto yy160;
	}
yy160:
#line 111 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 2285 "inc/ptx_parser.h"
yy161:
	yych = *++YYCURSOR;
	switch (yych) {
	case 's':	goto yy162;
	default:	goto yy48;
	}
yy162:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'i':	goto yy163;
	default:	goto yy48;
	}
yy163:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'z':	goto yy164;
	default:	goto yy48;
	}
yy164:
	yych = *++YYCURSOR;
	switch (yych) {
	case 'e':	goto yy165;
	default:	goto yy48;
	}
yy165:
	++YYCURSOR;
#line 110 "inc/ptx_parser.hre"
	{ addToken(Directive, token, YYCURSOR); continue;}
#line 2314 "inc/ptx_parser.h"
}
#line 178 "inc/ptx_parser.hre"

    if (YYCURSOR >= YYLIMIT)
      break;
  }

  // for (auto token : tokenVec){
  //  std::cout << TokenClassName[token.ty] << ": " << token.str << '\n';
  //}

  return tokenVec;
}

// Parsing
// * .entry .* _kernel_name_ [(parameter+)] { statement+ }
// statement: .directive+ operand+;
//            instruction operand+;
// operand: register  | string | int | float | address

enum TokenQuantizer { TQ_None, One, LeastOne, Any };

bool parseFunction(std::vector<Token>::iterator iter,
                   std::vector<Token>::iterator end, PTXFunction &func) {

  Token next = *(iter);
  // Get FunctionName
  do {
    next = *(iter++);
    switch (next.ty) {
    case lBracket:
      do { // Skip all tokens until bracket is closed
        next = *(iter++);
      } while (next.ty != rBracket);
      break;
    case Identifier:
      func.name = next.str; // Found Function Name
      break;
    default:
      break; // Skip Token
    }
  } while (next.ty != Identifier);

  // Check for Parameterlist
  if (next.ty == lBracket) {
    do {
      next = *(iter++);
    } while (next.ty != rBracket);
    next = *(iter++);
  }

  // Check for Function Body
  bool forever = true;
  do {
    switch (next.ty) {
    case lcBracket:
      forever = false;
      break; // Found function body
    case Semicolon:
      return true; // Found function decleration
    default:
      next = *(iter++);
    }
  } while (forever);

  if (next.ty == lcBracket) {
    std::string currentBB = "";
    int bbIdx = -1;
    int cBracketLevel = 0;

    do {
      next = *(iter++);

      // Directive?
      if (next.ty == Directive) {
        // If .loc directive, skip the next 3 integers
        if (next.str == ".loc") {
          for (int i = 0; i < 3; ++i) {
            next = *(iter++);
            if (next.ty != Integer)
              std::cerr << "ERROR: Expected Integer, got "
                        << TokenClassName[next.ty] << " instead\n";
          }
        } else {
          // Skip until Semicolon
          do {
            next = *(iter++);
          } while (next.ty != Semicolon);
        }
      }
      // Instruction
      else if (next.ty == Instruction) {
        if (currentBB.empty() or bbIdx < 0) {
          std::cerr << "No BB to assign instruction!\n";
          std::cerr << "Instruction: " << next.str << "\n";
          return false;
        }

        func.bb[bbIdx].inst.push_back(next.str);
        // Skip until Semicolon
        do {
          next = *(iter++);
        } while (next.ty != Semicolon);
      }
      // Comment
      else if (next.ty == Comment) {
        // Check for BB Label
        size_t pos = next.str.rfind("// %");
        if (pos != std::string::npos) {
          size_t bbPos = pos + 4;
          // Check for whitespace and colon after name
          // use this as end of the bb label
          size_t wpos1 = next.str.find(" ", bbPos);
          size_t wpos2 = next.str.find("\t", bbPos);
          size_t wpos3 = next.str.find(":", bbPos);
          size_t wpos = wpos1 < wpos2 ? wpos1 : wpos2;
          wpos = wpos < wpos3 ? wpos : wpos3;
          size_t len;
          if (wpos != std::string::npos)
            len = wpos - (bbPos);
          else
            len = next.str.rfind("\n") - (bbPos);

          currentBB = next.str.substr(bbPos, len);
          func.bb.push_back({currentBB, {}});
          ++bbIdx;
          // std::cout << "Found BB: " << currentBB << '\n';
        }
      }
      // Label
      else if (next.ty == Label) {
        // Skip
      }
      // Guard
      else if (next.ty == Guard) {
        // Skip
        next = *(iter++);
        if (next.ty != Register) {
          std::cerr << "Expected Register after Guard token not found!\n";
          return false;
        }
      }
      // LC Bracket of inline asm
      else if (next.ty == lcBracket) {
        ++cBracketLevel;
        // Skip
      }
      // rcBracket aka End of Function
      else if (next.ty == rcBracket) {
        if (cBracketLevel <= 0)
          break;
        else
          --cBracketLevel;
      }
      // Error Otherwise
      else {
        std::cerr << "Unexpected token: " << TokenClassName[next.ty] << "\t"
                  << next.str << '\n';
        return false;
      }
    } while (true);

    // Success
    return true;
  } else {
    return false;
  }
}

std::vector<PTXFunction> parse(std::vector<Token> tokenVec) {
  std::vector<PTXFunction> funcVec;

  auto tokenIter = tokenVec.begin();

  while (tokenIter != tokenVec.end()) {
    // TODO Valitade Stuff outside of kernel functions
    Token current = *(tokenIter++);
    if (current.ty == Directive and
        (current.str == ".entry" or current.str == ".func")) {
      PTXFunction func;
      parseFunction(tokenIter, tokenVec.end(), func);
      funcVec.push_back(func);
    }
  }

  return funcVec;
}

} // namespace mekong

#endif
